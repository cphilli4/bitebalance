name: CI Pipeline for Diet Analyzer Backend

on:
  pull_request:
    branches:
      - main  # Trigger this workflow on pull requests to the main branch

jobs:
  test:
    runs-on: ubuntu-latest  # Use an Ubuntu VM to run the CI pipeline, it also comes with docker preinstalled

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Cache Python dependencies to speed up future runs
      - name: Cache pip dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip  # Directory where pip caches packages
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}  # Unique cache key based on OS and requirements.txt
          restore-keys: |
            ${{ runner.os }}-pip-  # Fall back to a broader cache key if the exact match is not found

      # Step 3: Set up Python on the VM
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # Specify Python version to ensure consistency across runs

      # Step 4: Install Python dependencies using pip, leveraging the cache if available
      - name: Install dependencies
        run: pip install -r BiteBalanceBackend/requirements.txt

      # Step 5: Install Docker Compose, required to build and manage containers
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 6: Build and run the Docker containers for the application and its services
      - name: Build and run Docker containers
        env:  # Pass GitHub Secrets as environment variables for sensitive information
          PORT: ${{ secrets.PORT }}
          APPLICATION_ID: ${{ secrets.APPLICATION_ID }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_SERVER: ${{ secrets.POSTGRES_SERVER }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_OP_USER: ${{ secrets.POSTGRES_OP_USER }}
          POSTGRES_OP_PASSWORD: ${{ secrets.POSTGRES_OP_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          docker-compose -f docker-compose.ci.yml up -d --build  # Use the CI-specific Docker Compose file

      # Step 7: Run tests inside the Docker container to ensure the application is working as expected
      - name: Run tests in Docker
        run: |
          docker-compose -f docker-compose.ci.yml exec bitebalancebackend pytest -s -v app/tests/${TEST_FILE}  # Run pytest with coverage reporting

      # Step 8: Shut down the Docker containers to clean up after the tests
      - name: Shutdown Docker containers
        run: docker-compose -f docker-compose.ci.yml down